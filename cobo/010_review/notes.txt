TNPG stingRAY: Rin Fukuoka, Abdullah Faruque, Yuki Feng
APCS pd08
Lab06
02-10-22
---------------------------------------------------------------------------
DISCO: this lab has a lot of reading!

---------------------------------------------------------------------------
QCC:

---------------------------------------------------------------------------
LAB ANSWERS:

- ACTIVITY 1 -
1.
  a) public static double sentimentVal( String word )
  b) Yes, a String, you get error if diff param passed.
  c) return double
2.
  method call || return value
  sentimentVal("nice"); || 2.09
  sentimentVal("rude"); || -0.42
  sentimentVal("great"); || 1.48
3.
  a) yes because sentimentVal intakes String "warm" and returns double that will
  then be used as value for num
  b) no bc sentimentVal only returns doubles
  c) no bc sentimentVal only takes 1 param

- ACTIVITY 2 -
4.
  it works by iterating through the String with a for loop and checking if the
  adjective has sentimental value. we add up the sentimental values we find.
5.
  a) the star ratings make sense bc more sentiment means a better review which
  the stars account for. SimpleReview is a negative review w low totalSentiment
  so it returns 1 star whereas OrangeReview is positive w high totalSentiment so
  it returns more stars.
  b) compare the pos adj to words near it to see if it is actually correct
  sentiment and compare amt pos to neg to see if review was majority neg or pos
6.
 a) did not account for totalSentiment values >= 15 bc it does not make sense to
 have more sentiment yet lower stars
 b) have an else if statement testing for (totalSentiment >=15) which will return
 5 stars and then else will return 0 stars.

- ACTIVITY 3 -
3.
  indexOf finds the index of a character you specify and then substring cuts a
  String from that index i until the end of the String or a specified index after
  i. It is necessary to add 1 bc String indices start at 0.
5.
  static cannot be overriden like non static methods and it belongs to the class,
  not an object in the class.
6.
  instead of randomAdjective, use randomNegativeAdj or randomPositiveAdj

- ACTIVITY 4 -
1.
 to make an establishment look bad by gutting it with bad reviews.
2.
 to make your establishment look amazing with fake good reviews.
3.
 a stronger review will have stronger adjectives. In order to do this, the method
 must determine whether or not the adjective is good or bad. It then will keep doing
 randomAdjective till we get an adjective that is "stronger", higher sentimentVal if positive,
 lower if negative.
5.
oneword has the value of everything but the first letter now.
6. because in order to find the sentiment value, you need to scan the word. However, it won't
give you the right sentimentVal if there's an *, since the csv list does not account for it.
7.
replacing the adjective with stronger ones.

- ACTIVITY 5 -
1. I chose to make this method since it seems interesting, and slightly related to the stuff
we did for the lab ( moving words in sentences).
2. I planned it on a KTS, discussed with my trio, and began coding. I consulted with my group for parts
I was unsure of.
3. public boolean hasVowel(String doomah){
   This method returns a true or false statement. It is useful to determine if a word starts with a vowel,
   which is important for the method that does the real thing. The method is not static since all the methods
   are in the same file.
4. String[] mama = joe.split(" ");
   for (int i = 0; i < vowels.length(); i++){
   the .split method splits the string for every space. "joe mama" gives you an array of ["joe", "mama"].
   the .length method simply returns the length of the string.
5. if (hasVowel(mama[i])){
                withVowel +=" " + mama[i];
            } else {
                withoutVowel += " " + mama[i];
            }
        }
        this whole segment checks if the string word inside of mama, which has the words in the sentence, if it
        starts with a vowel. This can be done in another way by not using the helper method made, and basically asking
        manually, but that would be ineffecient.
6. for (int i = 0; i < vowels.length(); i++){
   this iteration iterates through String vowels = "AEIOUaeiou". The purpose of this is to check if the first letter of the input word
   is a vowel. another equivalent would be :

   int i = 0;
    while (i < vowels.length()) {
       if(vowels.charAt(i)==doomah.charAt(0)){
                return true;
            }
        }
    }
